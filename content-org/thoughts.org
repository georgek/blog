#+author: George Kettleborough
#+hugo_base_dir: ../
#+hugo_categories: Thoughts
#+html_container: section
#+html_container_nested: t

* TODO YouTube and the Public Square                        :youtube:opinion:

I want to tell a story about a public town square. The square is a focal point of the
town, a place where people can go to trade, meet up or just visit for its own
sake. There are often performances in the square: musicians play music, artists paint,
speakers give lectures and sermons.

Nearby the square many merchants have set up shop. It's an obvious place for them due to
the draw of the square itself. One day a group of merchants realise the artists
performing in the square are a key part of its draw, so they set up a kind of fund
between them and pay artists a share of this when they perform there. The merchants
realise they need the artists to drive business and don't want them to stop performing
there.

This makes the artists quite happy. They were always able to make some money from
busking, but now they have a more stable income from the merchants. The quality of the
performances actually increases and this draws even more crowds. Everyone wins.

Some of the merchants notice that some artists seem to be drawing more crowds than
others. They decide it's only fair that more popular artists take a larger share of the
funds. This creates competition between the artists. Now they have an incentive to
attract larger crowds so they try harder and broaden their appeal. More obscure artists
can still perform, but they find themselves with a smaller share of the fund.

At some point, people realise that performing in the square can be quite lucrative. If
they can draw enough of a crowd they'll receive quite a large payout from the merchants'
fund. Before long next to the buskers and their simple acoustic instruments are
flamboyant shows with dancers, lights and dozens of people behind the scenes making
things work.

More people than ever now visit the town square and some of the biggest artists in the
country perform there. But the merchants begin to realise that many people are just
coming for the shows and aren't buying anything at all. To try to counter this the
merchants introduce a new rule: for an artist to be eligible for a payout, they must
advertise the merchants' shops during their performance. The payout is now a product of
the number of people they draw and the number of advertisements they show.

This puts many people off. Many people learn that performances are often bookended with
adverts so they turn up late and leave early. This behaviour angers the merchants. They
try to appeal to the public: you can skip the adverts, but only if you buy something
directly from us. However the public cannot be compelled. After all, this is a public
square.

So what to do? The merchants could just accept that many people are still drawn to the
shops anyway and profit is still being made. But their greed makes this hard to accept:
if only they could capture /more/ profit. They could stop paying the artists, but by now
there are other town squares and the artists are businesses themselves and they will go
elsewhere to get paid. They could perhaps build a wall around the town square,
effectively claiming public land as private, and charge people to enter, but this would
drive away the buskers and turn the square into another concert venue which is an
entirely different market. The only option is to use tougher and tougher tactics to try
to get the public to see the adverts.

* DONE A Lament for the Firefox Quick Find Key                 :rant:firefox:
CLOSED: [2023-11-16 Thu 20:14]
:PROPERTIES:
:EXPORT_FILE_NAME: lamenting-firefox-quick-find
:END:

For as long as I've been a Firefox user---almost 20 years at this point---it has
featured a "quick find" bound to the venerable ~/~ (forward slash) key.

Following a pattern established by other software like ~less~, ~man~, and ~vi~ the slash
key was simple: it finds stuff in the current page.

Common patterns like this are great. It's why everyone has agreed on what ~Ctrl-C~ and
~Ctrl-V~ (or very similar) should do across all operating systems. The ~/~ key used to
be like this, but not any more.

Web designers, in their infinite wisdom, have taken it upon themselves to hijack the ~/~
key from users. They have decided that ~/~ shall not mean "find in page" but rather
"find across the entire website" or, in other words: not at all what that key is supposed
to do.

At first it was just hip new sites jumping on a trend like everyone is jumping on dark
mode right now (yes, I know I've jumped on that one too). But then websites I actually
use day in, day out started to do it. The latest offender, and what finally prompted
this post, is the [[https://docs.python.org/3/][Python]] documentation. [fn:1]

What's annoying is they could have picked any other key, but they picked ~/~ because
they /know/ this is already established for search. But "find in page" and "jump up to
my search bar and find in site using whatever custom search page I have implemented" are
not even close to the same thing.

So now I'm scared to try the ~/~ key and I've had to teach myself ~Ctrl-F~ instead which
is more awkward, less universal and doesn't behave in exactly the same way (notably,
~Enter~ or clicking away doesn't close the search).

I don't expect anything to change now, hence this lament.

[fn:1] Oddly, at around the same time, the [[https://docs.djangoproject.com/en/4.2/][Django]] docs happily /disabled/ their ~/~ key
hijacking. You win some, you lose some, I suppose.

* DONE Cooking with Make      :cooking:programming:make:makefile:declarative:
CLOSED: [2023-08-03 Thu 00:00]
:PROPERTIES:
:EXPORT_FILE_NAME: cooking-with-make
:EXPORT_HUGO_CUSTOM_FRONT_MATTER: :summary In which I compare cooking food with building software
:END:

** Introduction                                                      :ignore:

I cook a lot of food from scratch and it occurred to me one day that the way I
understand and assimilate recipes is very similar to how ~make~ works.

So, in case you don't know, ~make~ is a tool used to build executable software from
source code.  Building software often involves several steps such as translation,
compilation, linking and bundling.  The process required for a particular project is
describe in a ~Makefile~ but, here's the thing, it isn't described imperatively, it's
described /declaratively/.

Let's look at an example:

#+BEGIN_SRC makefile
myprogram: code.c
	gcc code.c -o myprogram
#+END_SRC

In the example ~myprogram~ is a *target* and ~code.c~ is a *prerequisite*.  The target
is what ~make~ is going to, well, make.  The prerequisite is what is required before we
can make it.  In this case, the prerequisite is source code, so is always present and
satisfied.

The second line tells make /how/ to make the target from the prerequisite (OK, this bit
is imperative, but we have to do /something/).  In this case, we run a C compiler.

In this second example, more than one step is required to build the target:

#+BEGIN_SRC makefile
myprogram: module.o
	gcc module.o -o myprogram

module.o: module.c
	gcc -c module.c -o module.o
#+END_SRC

Now we first require ~module.o~ and, in case it's not already present, we show how to
make ~module.o~ too which requires ~module.c~, the source code.

** Making food

So what does a food recipe look like in a ~Makefile~?  Here's how to make a basic
[[https://en.wikipedia.org/wiki/B%C3%A9chamel_sauce][béchamel sauce]]:

#+BEGIN_SRC makefile
béchamel: milk roux
	Gradually incorporate milk into roux, whisking continuously

roux: butter flour
	Combine equal parts melted butter and flour into smooth paste
#+END_SRC

We could easily extend this file to include higher-level targets, like a [[https://en.wikipedia.org/wiki/Mornay_sauce][Mornay sauce]]:

#+BEGIN_SRC makefile
mornay: béchamel grated-cheese
	Add grated cheese to warm sauce
#+END_SRC

More complex recipes are then natural:

#+BEGIN_SRC makefile
cauliflower-cheese: mornay boiled-cauliflower
	Combine sauce and boiled cauliflower

boilded-cauliflower: cauliflower
	Separate cauliflower and boil in salted water
#+END_SRC

** Implicit rules

A perhaps lesser-known feature of ~make~ is that it contains implicit rules.  That is,
~make~ already knows how to make some things, mostly around C compilation.  These aren't
as often used today, probably because C is no longer the only language in town.

#+BEGIN_SRC makefile
module: module.o
#+END_SRC

This is a valid ~Makefile~.  This works because ~make~ already knows how to make
~module.o~ from ~module.c~ and ~module~ from ~module.o~.

It's the same in the kitchen.

#+BEGIN_SRC makefile
salsa: chopped-tomato chopped-onion chopped-chilli
#+END_SRC

Some things don't need to be written as rules.  Even if you've never seen a chilli
before, you already know to get chopped chilli from chilli: you chop it with a knife.
And you already know that to make a sauce from chopped ingredients: you mix them.

** Parallel execution

It's possible to configure ~make~ to run jobs in parallel with the ~-j~ flag, for
example ~-j4~ says run up to four things at once, presumably because you have four CPU
cores available.  The following process can be sped up on two cores:

#+BEGIN_SRC makefile
myprogram: main.o module.o
#+END_SRC

This is because building ~main.o~ and ~module.o~ don't depend on each other so can each
be built immediately, as soon as a CPU core is available.

It's the same in the kitchen.  Instead of CPU cores you have burners, ovens, toasters
etc.  The following can be executed in parallel given one toaster and one hob:

#+BEGIN_SRC makefile
beans-on-toast: warm-beans toasted-bread
#+END_SRC

** Cooking isn't a script

Before I could cook myself, I used to marvel at the ability of experienced cooks to not
only reproduce a dish from memory, but to seemingly make it up as they went along.  To
observe it would appear the script was different every time, but the result was always
the same!

Now I realise how it's possible: they weren't memorising scripts.  That would be far too
hard.  Imagine the hundreds of recipes and thousands of steps that would need to be
remembered.  Instead, human minds have a remarkable ability to organise this stuff, and
I think it looks like one giant ~Makefile~.  We develop implicit rules far more
comprehensive than those of ~make~.  Complex recipes are integrated by taking advantage
of the redundancy in multiple layers of existing rules.

We probably even have a default target or, in English, a favourite comfort dish.

When reading recipes they are almost always written in imperative style.  My approach is
to read it once through and assimilate it into my global ~Makefile~ before executing
it.  I don't think it's a good idea to execute any recipe from top to bottom without
reading it first.  I'll often scribble down a recipe into a pseudo-~Makefile~ format and
take that into the kitchen rather than the original text.

For the record, I don't actually write down recipes in anything close to a strict
~Makefile~ format but, just for fun, here's what I think a Margherita pizza recipe looks
like:

#+BEGIN_SRC makefile
margherita-pizza: cooked-margherita-pizza basil
	Add basil to top of pizza

cooked-margherita-pizza: pizza-base tomato-sauce cheese
	Spread sauce on base and top with cheese, bake in oven

pizza-base: pizza-dough
	Stretch dough into thin circular disc

pizza-dough: flour water salt yeast
	Combine ingredients, knead, prove for many hours

tomato-sauce: tomato
	Peel and chop tomatoes
#+END_SRC

# Local Variables:
# org-footnote-section: nil
# End:
