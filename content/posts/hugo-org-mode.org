#+TITLE: Writing a blog with org-mode
#+DATE: 2023-07-15
#+DRAFT: false
#+DESCRIPTION: How I set up this blog using emacs, org-mode and Hugo
#+CATEGORIES[]: Technology
#+TAGS[]: emacs org-mode hugo blog
#+KEYWORDS[]:
#+SLUG: hugo-org-mode
#+SUMMARY: I've set up my blog such that I can write it using org-mode and host it and edit it anywhere. I'm using Hugo as a static site generator and GitHub as a host.

I've always thought I should write a blog, but I just never got around to setting it
up.  I know there are services you can simply sign up to and start writing, but that
isn't for me.  I have two requirements for this thing:

1. I can write using tools of my choice,
2. I can host it anywhere.

My tool of choice for writing anything is emacs and, for natural language in particular,
[[https://orgmode.org/][org-mode]].  This is a bit like markdown, but better.  For version control and deployment
I use git.

I also want to be able to host it anywhere because I don't want to be tied to a host
and, ideally, I don't want to pay for it either.  Back in the day it was common to use a
dynamic site for a blog.  Your content would live in a database and was served up using
some backend process like WordPress.  But that's too expensive and places too many
requirements on the host.

With that in mind, I've decided to use a static site generator.  This is ideal as it
means I don't have to write raw HTML myself (although you can) but the output can be
hosted anywhere.  I've decided to use [[https://gohugo.io/][Hugo]] simply because it looks good, seems fast,
well maintained, supports the workflow I want and, most importantly, supports org-mode.

* Using org-mode with Hugo

First of all, you set up your Hugo project by following the [[https://gohugo.io/getting-started/quick-start/][quickstart guide]].

The next thing I did was install the [[https://github.com/adityatelange/hugo-PaperMod/wiki/Installation][PaperMod theme]], as it seems like a decent default
for a blog.

Now, to start a new page using org-mode, you first need to install an [[https://gohugo.io/content-management/archetypes/][archetype]].  These
are essentially templates that Hugo uses to start new content.  By default it comes with
a markdown archetype in ~archetypes/default.md~.  You should add the following code in
~archetypes/default.org~:

#+NAME: archetypes/default.org
#+BEGIN_SRC org
,#+TITLE: {{ replace .Name "-" " " | title }}
,#+DATE: {{ .Date }}
,#+DRAFT: true
,#+DESCRIPTION:
,#+CATEGORIES[]:
,#+TAGS[]:
,#+KEYWORDS[]:
,#+SLUG:
,#+SUMMARY:

#+END_SRC

Now you can start a new org-mode post by running: ~hugo new posts/my-org-post.org~.
You'll find your org-mode file ready to edit in ~content/posts/my-org-post.org~.  The
metadata is pretty self-explanatory, but you can just play around with it.

* Deploying with Github Actions

First of all, *before* you build or commit anything, add a ~.gitignore~ file:

#+BEGIN_SRC
/.hugo_build.lock
/public/*
!/public/.nojekyll
#+END_SRC

This will ensure you don't accidentally commit your locally built version of the site.

You should also add the ~.nojekyll~ file to stop GitHub trying to run Jekyll (another
static site generator) on your stuff.  I'm not sure if this is still necessary but it
can't harm:

#+BEGIN_SRC bash
mkdir -p public
touch public/.nojekyll
#+END_SRC

Now commit the ~.gitignore~ and ~.nojekyll~ files.

To publish your site you simply run ~hugo~.  This builds the site, including all
articles that are *not* marked as draft, and puts it all into the ~/public/~ directory.
Now, you could simply copy the contents of that directory to a web server of your
choice.  That's how we did it back in the day.  This is how it meets my "can host
anywhere" requirement.

But I'm lazy and I want it to be easier.  I just want the site to build and deploy when
I push my changes to git.  This is actually remarkably simple to achieve with modern CI
tooling such as GitHub Actions.  Although, note: I won't be tied to GitHub or GitHub
Actions in any meaningful way, it's essentially a glorified copy at the end of the day
and I can always build my site on my own computer and copy the output the
"old-fashioned" way.

To build using GitHub simply add the following to ~/.github/workflows/hugo.yml~:

#+BEGIN_SRC yaml
name: hugo

on:
  push:
    branches: [master]

permissions:
  contents: write

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: true

      - name: Setup Hugo
        uses: peaceiris/actions-hugo@v2
        with:
          hugo-version: '0.115.2'
          extended: true

      - name: Build
        run: hugo --minify

      - name: Deploy
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          branch: gh-pages
          folder: public
#+END_SRC

This pipeline is triggered by pushes to the ~master~ branch.  It checks out the code,
sets up Hugo with the same version that I used locally, builds using ~--minify~ (I don't
like minified pages generally, but the source is available freely so might as well save
bandwidth) and deploys it to the ~gh-pages~ branch.  Note that the source will live on
the ~master~ branch (or any other branch), the built version will end up on the
~gh-pages~ branch, which will then be deployed to Github Pages itself.

* Conclusion

This should be everything needed to get started writing a blog (or any static site) with
Hugo and hosting it on Github.  If you are reading this then I guess it worked!

Links to the tools in use:

- org-mode: https://orgmode.org/
- Hugo: https://gohugo.io/
- GitHub Pages: https://pages.github.com/
- actions-hugo: https://github.com/peaceiris/actions-hugo
- github-pages-deploy-action: https://github.com/JamesIves/github-pages-deploy-action
