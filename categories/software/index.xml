<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Software on</title><link>https://blog.gpkb.org/categories/software/</link><description>Recent content in Software on</description><generator>Hugo</generator><language>en-gb</language><lastBuildDate>Thu, 14 Mar 2024 22:21:00 +0000</lastBuildDate><atom:link href="https://blog.gpkb.org/categories/software/index.xml" rel="self" type="application/rss+xml"/><item><title>Git is a Version Control System</title><link>https://blog.gpkb.org/posts/git-is-a-version-control-system/</link><pubDate>Sat, 24 Feb 2024 17:23:00 +0000</pubDate><guid>https://blog.gpkb.org/posts/git-is-a-version-control-system/</guid><description>The title of this post isn&amp;rsquo;t supposed to be provocative. After all, it&amp;rsquo;s simply the textbook definition of what git is. So why bother stating it? Well, I&amp;rsquo;ve worked with a fair few junior developers now and I&amp;rsquo;m starting to see a pattern. Many of these developers have never programmed without git and they see git simply as &amp;ldquo;the way to get new code into a repository&amp;rdquo;. A glorified copy, essentially&amp;mdash;but an annoying one that is prone to going wrong.</description></item><item><title>Emacs Undo Redo</title><link>https://blog.gpkb.org/posts/emacs-undo/</link><pubDate>Thu, 14 Dec 2023 22:18:00 +0000</pubDate><guid>https://blog.gpkb.org/posts/emacs-undo/</guid><description>At first glance, undo seems like a simple thing expected of most software these days and hardly worth writing about. Indeed, when I say Emacs has a very powerful undo system&amp;mdash;probably more so than any other text editor&amp;mdash;you may wonder what could make an undo system powerful. So let&amp;rsquo;s start by considering two big problems most undo systems have:
If you undo something, make some changes, then change your mind, what you undid is now lost and unrecoverable, If you make changes in two parts of the same file you cannot undo changes in the first part without undoing changes in the second part too.</description></item><item><title>Bash History Hacks</title><link>https://blog.gpkb.org/posts/project-local-bash-history/</link><pubDate>Tue, 05 Dec 2023 22:22:00 +0000</pubDate><guid>https://blog.gpkb.org/posts/project-local-bash-history/</guid><description>When you work a lot on the command line, history can be invaluable. I&amp;rsquo;ve lost count of the number of times I&amp;rsquo;ve forgotten how I ran some earlier command and used my bash history to find out what it was. This is one of the big advantages of using CLIs over GUIs.
Accessing history The main interface I use to my history is ^P (Ctrl-P). This recalls the previous command from history.</description></item><item><title>Using Nerd Icons in Org Agenda</title><link>https://blog.gpkb.org/posts/org-agenda-nerd-icons/</link><pubDate>Tue, 14 Nov 2023 23:56:00 +0000</pubDate><guid>https://blog.gpkb.org/posts/org-agenda-nerd-icons/</guid><description>Org mode supports icons in its agenda views. The icons can be given as either file paths to images (like SVGs), as image data or as a display property. I use a Nerd Font along with the nerd-icons package in my Emacs config, so I thought I might as well enable icons in my org agenda views.
The nice thing about using nerd fonts is this works perfectly in text mode too (assuming you have a nerd font configured for your terminal emulator).</description></item><item><title>Custom Static Vector Maps on your Hugo Static Site</title><link>https://blog.gpkb.org/posts/hugo-static-site-maps/</link><pubDate>Fri, 27 Oct 2023 00:11:00 +0000</pubDate><guid>https://blog.gpkb.org/posts/hugo-static-site-maps/</guid><description>This blog is a static site built with Hugo. Being static means it can be served from a basic, standard (you might say stupid) web server with no server-side scripting at all. In fact, this blog is currently hosted on Github Pages, but it could be anywhere.
Up until now, if you wanted to include an interactive map on a static site you were limited to using an external service like Google Maps or Mapbox and embedding their JS into your page.</description></item><item><title>Why is Emacs Hanging?</title><link>https://blog.gpkb.org/posts/emacs-hangs-debug/</link><pubDate>Thu, 21 Sep 2023 14:10:00 +0000</pubDate><guid>https://blog.gpkb.org/posts/emacs-hangs-debug/</guid><description>Even after using Emacs for 15 years there&amp;rsquo;s still so much I can learn. I probably should have already known this, but there&amp;rsquo;s a first time for everything.
It&amp;rsquo;s rare that Emacs hangs. Exceedingly rare. Which is probably why I didn&amp;rsquo;t know how to deal with it. Today Emacs started hanging when trying to open files over a remote TRAMP session (SSH).
The most important key of all that everyone who uses Emacs knows is C-g.</description></item><item><title>Replacing Strings in an Entire Project</title><link>https://blog.gpkb.org/posts/emacs-regexp-replace/</link><pubDate>Tue, 22 Aug 2023 14:22:00 +0000</pubDate><guid>https://blog.gpkb.org/posts/emacs-regexp-replace/</guid><description>This is a little trick I just applied and thought was cool enough to write down.
Let&amp;rsquo;s say you want to replace a name that is used throughout a project. Due to various conventions/restrictions in use the name might appear in several forms like: MY_COOL_NAME, my-cool-name, my_cool_name etc.
In Emacs you can invoke regexp replace across an entire project by invoking project-query-replace-regexp, by default bound to C-x p r. This will first prompt for the regexp to search for, then what to replace it with.</description></item><item><title>Install Calibre without Root</title><link>https://blog.gpkb.org/posts/calibre-rootless-install/</link><pubDate>Sun, 13 Aug 2023 13:23:00 +0000</pubDate><guid>https://blog.gpkb.org/posts/calibre-rootless-install/</guid><description>On Linux, software should generally be installed with your system package manager (apt, yum, portage etc.) However, Calibre is a bit &amp;ldquo;special&amp;rdquo; in this respect. While well-loved, it&amp;rsquo;s known to be a bit difficult to package (to say the least) and most distro packages you&amp;rsquo;ll find are out of date. The official website recommends against using any distro packages and instead installing it directly from the site.
Unfortunately, the official instructions are problematic for a number of reasons.</description></item><item><title>Writing a Blog with Org-mode</title><link>https://blog.gpkb.org/posts/hugo-org-mode/</link><pubDate>Sat, 15 Jul 2023 13:43:00 +0000</pubDate><guid>https://blog.gpkb.org/posts/hugo-org-mode/</guid><description>I&amp;rsquo;ve always thought I should write a blog, but I just never got around to setting it up. I know there are services you can simply sign up to and start writing, but that isn&amp;rsquo;t for me. I have two requirements for this thing:
I can write using tools of my choice, I can host it anywhere. My tool of choice for writing anything is emacs and, for natural language in particular, org-mode.</description></item></channel></rss>