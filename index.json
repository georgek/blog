[{"content":" I\u0026#39;ve always thought I should write a blog, but I just never got around to setting it up. I know there are services you can simply sign up to and start writing, but that isn\u0026#39;t for me. I have two requirements for this thing:\nI can write using tools of my choice, I can host it anywhere. My tool of choice for writing anything is emacs and, for natural language in particular, org-mode. This is a bit like markdown, but better. For version control and deployment I use git.\nI also want to be able to host it anywhere because I don\u0026#39;t want to be tied to a host and, ideally, I don\u0026#39;t want to pay for it either. Back in the day it was common to use a dynamic site for a blog. Your content would live in a database and was served up using some backend process like WordPress. But that\u0026#39;s too expensive and places too many requirements on the host.\nWith that in mind, I\u0026#39;ve decided to use a static site generator. This is ideal as it means I don\u0026#39;t have to write raw HTML myself (although you can) but the output can be hosted anywhere. I\u0026#39;ve decided to use Hugo simply because it looks good, seems fast, well maintained, supports the workflow I want and, most importantly, supports org-mode.\nUsing org-mode with Hugo First of all, you set up your Hugo project by following the quickstart guide.\nThe next thing I did was install the PaperMod theme, as it seems like a decent default for a blog.\nNow, to start a new page using org-mode, you first need to install an archetype. These are essentially templates that Hugo uses to start new content. By default it comes with a markdown archetype in archetypes/default.md. You should add the following code in archetypes/default.org:\n#+TITLE: {{ replace .Name \u0026#34;-\u0026#34; \u0026#34; \u0026#34; | title }} #+DATE: {{ .Date }} #+DRAFT: true #+DESCRIPTION: #+CATEGORIES[]: #+TAGS[]: #+KEYWORDS[]: #+SLUG: #+SUMMARY: Now you can start a new org-mode post by running: hugo new posts/my-org-post.org. You\u0026#39;ll find your org-mode file ready to edit in content/posts/my-org-post.org. The metadata is pretty self-explanatory, but you can just play around with it.\nDeploying with Github Actions First of all, before you build or commit anything, add a .gitignore file:\n/.hugo_build.lock /public/* !/public/.nojekyll This will ensure you don\u0026#39;t accidentally commit your locally built version of the site.\nYou should also add the .nojekyll file to stop GitHub trying to run Jekyll (another static site generator) on your stuff. I\u0026#39;m not sure if this is still necessary but it can\u0026#39;t harm:\nmkdir -p public touch public/.nojekyll Now commit the .gitignore and .nojekyll files.\nTo publish your site you simply run hugo. This builds the site, including all articles that are not marked as draft, and puts it all into the /public/ directory. Now, you could simply copy the contents of that directory to a web server of your choice. That\u0026#39;s how we did it back in the day. This is how it meets my \u0026#34;can host anywhere\u0026#34; requirement.\nBut I\u0026#39;m lazy and I want it to be easier. I just want the site to build and deploy when I push my changes to git. This is actually remarkably simple to achieve with modern CI tooling such as GitHub Actions. Although, note: I won\u0026#39;t be tied to GitHub or GitHub Actions in any meaningful way, it\u0026#39;s essentially a glorified copy at the end of the day and I can always build my site on my own computer and copy the output the \u0026#34;old-fashioned\u0026#34; way.\nTo build using GitHub simply add the following to /.github/workflows/hugo.yml:\nname: hugo on: push: branches: [master] permissions: contents: write jobs: deploy: runs-on: ubuntu-latest steps: - name: Checkout uses: actions/checkout@v3 with: submodules: true - name: Setup Hugo uses: peaceiris/actions-hugo@v2 with: hugo-version: \u0026#39;0.115.2\u0026#39; extended: true - name: Build run: hugo --minify - name: Deploy uses: JamesIves/github-pages-deploy-action@v4 with: branch: gh-pages folder: public This pipeline is triggered by pushes to the master branch. It checks out the code, sets up Hugo with the same version that I used locally, builds using --minify (I don\u0026#39;t like minified pages generally, but the source is available freely so might as well save bandwidth) and deploys it to the gh-pages branch. Note that the source will live on the master branch (or any other branch), the built version will end up on the gh-pages branch, which will then be deployed to Github Pages itself.\nConclusion This should be everything needed to get started writing a blog (or any static site) with Hugo and hosting it on Github. If you are reading this then I guess it worked!\nLinks to the tools in use:\norg-mode: https://orgmode.org/ Hugo: https://gohugo.io/ GitHub Pages: https://pages.github.com/ actions-hugo: https://github.com/peaceiris/actions-hugo github-pages-deploy-action: https://github.com/JamesIves/github-pages-deploy-action ","permalink":"https://georgek.github.io/blog/posts/hugo-org-mode/","summary":"I\u0026#39;ve set up my blog such that I can write it using org-mode and host it and edit it anywhere. I\u0026#39;m using Hugo as a static site generator and GitHub as a host.","title":"Writing a blog with org-mode"}]